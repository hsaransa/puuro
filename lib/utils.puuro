# Weird features

builtin.type.set_method 'multi
{<builtin m s *r>
    builtin.print m " " s " " ;
    r.each
    {<l>
        s = builtin.apply (s.type.get_method m):rcall [s] + r;
    };
    s;
};


builtin.type.set_method 'bg
{<builtin code>
    act = \f;

    builtin.new_continuation {<orig>
        builtin.active_frame.set_exception_handler orig.get_exception_handler;
        act = builtin.active_frame;

        builtin.sleep 0 orig;

        act = \f;
        code.call;
    };

    act;
};

builtin.type.set_method 'range {<builtin s e>
  i = s;
  l = [];

  builtin.while {i <= e}
  {
      l.append i;
      i = i + 1;
  };

  l;
};

builtin.type.set_method 'min {<builtin *l>
    v = l.first;
    (l.all_after 1).each {<x>
        (x < v) { v = x };
    };
    v;
};

builtin.type.set_method 'max {<builtin *l>
    v = l.first;
    (l.all_after 1).each {<x>
        (x > v) { v = x };
    };
    v;
};

builtin.type.set_method 'all {<builtin *l>
    v = \t;
    l.each {<x> v = v.and x};
    v;
};

builtin.type.set_method 'any {<builtin *l>
    v = \f;
    l.each {<x> v = v.or x};
    v;
};

builtin.type.set_method 'assert {<builtin c *o>
    c.else { (exception 'assertion_failed o).raise }
};

builtin.type.set_method 'switch {<builtin value *cases>
    ret = \f;

    repeat
    {
        (cases.len < 2).if
        {
            ret = cases.first();
            cases = [];
        }
        {
            (value == cases.first).if
            {
                ret = cases.second();
                cases = [];
            }
            {
                cases = cases.all_after 2;
            };
        };

        !cases.empty;
    };

    ret;
};

builtin.type.set_method 'break {<builtin obj>
    (exception 'break obj).raise;
};

builtin.type.set_method 'block {<builtin c>
    f = builtin.active_frame;
    prev = f.get_exception_handler;

    ret = new_continuation {<orig>
        ff = c.call_frame;

        ff.set_exception_handler {<e c>
            (e.name == 'break).then {
                orig.continue e.obj;
            };
            prev e c;
        };

        orig.continue ff.execute;
    };

    ret;
};
