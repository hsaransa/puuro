modules = builtin.assoc;
sources = builtin.assoc;

builtin.type.set_method 'module_source
{<builtin m src>
    sources.set m src;
};

builtin.type.set_method 'module
{<builtin m code>
    (modules.has m).then { (exception 'bad_module "already exists").raise };

    mod = [[] \n];

    f = code.call_frame;
    f.scope.set_local 'pollute {<name obj>
        mod.first.append [name obj];
    };
    f.execute;

    modules.set m mod;
};

builtin.type.set_method 'require
{<builtin *mods>
    f = builtin.active_frame.caller;

    mods.each {<m>
        (modules.has m).else {
            (sources.has m).else {
                (exception 'bad_module m).raise;
            };

            execute \t (sources.get m);
        };

        module = modules.get m;
        module.first.each {<x>
            f.scope.set_local x.first x.second;
        };
    };
};

builtin.type.set_method 'include
{<builtin *fns>
    s = builtin.active_frame.caller.scope;
    fns.each {<fn>
        f = builtin.compile_file fn;
        f.set_exception_handler builtin.active_frame.get_exception_handler;
        f.set_scope s;
        f.execute;
    };
};
