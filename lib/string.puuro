# String extensions

t = "".type;

t.set_method 'length {<l> l.len };
t.set_method 'size {<l> l.len };
t.set_method 'empty {<l> l.len == 0 };

# Work-around for ambiguous foo[index] operator.
t.set_method 'call {<a b> a.at b.first};

t.set_method 'split {<src s *n>
    l = [];
    i = 0;
    limit = n.empty.if {256*256*256} {n.first};

    repeat
    {
        i = i + 1;
        (i <= limit)
        {
            pos = src.find s;
            (pos >= 0)
            {
                l.append (src.all_before pos);
                src = src.all_after (pos + s.len);
            };
        };
    };

    l.append(src);

    l;
};

t.set_method 'mul {<s n>
    ss = "";
    n.times { ss = ss + s; };
    ss;
};

t.set_method 'each {<s c>
    i = 0;
    l = s.size;
    while {i < l} {
        c (s.at i);
        i = i + 1;
    };
};

t.set_method 'map {<s c>
    ret = [];
    i = 0;
    l = s.size;
    while {i < l} {
        ret.append (c (s.at i));
        i = i + 1;
    };
    ret
};

# String classify

libc = std2.get_module 'libc;
isdigit = libc.get_function 'isdigit;
isalpha = libc.get_function 'isalpha;
isalnum = libc.get_function 'isalnum;
isspace = libc.get_function 'isspace;
islower = libc.get_function 'islower;
isupper = libc.get_function 'isupper;

classify = {<s cc>
    block {
        s.empty.then { break \f };
        s.each {<c>
            ((cc c.ord) == 0).then { break \f }
        };
        \t
    };
};

t.set_method 'isdigit {<s> classify s isdigit };
t.set_method 'isalpha {<s> classify s isalpha };
t.set_method 'isalnum {<s> classify s isalnum };
t.set_method 'isspace {<s> classify s isspace };
t.set_method 'islower {<s> classify s islower };
t.set_method 'isupper {<s> classify s isupper };
