# Puuro main file

std.pollute std;

(args.size < 2).then {
    raise (exception 'not_enough_arguments "give more arguments to the program");
};

std.active_frame.set_exception_handler {<e c>
    print "exception: " e.name.s ", " e.obj;
    (e.name == 'system_error).then {
        print "system error: " (((std2.get_module 'libc).get_function 'strerror) e.obj);
    };
    print "trace:";
    repeat {
        print "  " c.current_file.s ", " c.current_line;
        c = c.caller;
        c != \n;
    };
};

puuro_executable = args.first;
script_file      = args.second;

args = args.all_after 2;

execute = {<internal fn>
  f = std.compile_file fn;
  f.scope.pollute std;
  f.scope.set_local 'std std;
  f.scope.set_local 'std2 std2;
  f.scope.set_local 'resolver resolver;
  f.scope.set_local 'args args;
  internal.then {
      f.scope.set_local 'execute execute;
  };
  f.execute;
};

["exceptions.puuro"
 "module.puuro"
 "list.puuro"
 "utils.puuro"
 "string.puuro"].each {<x>
    execute \t lib_dir + "/" + x
};

['streams 'blocking 'file 'web 'net 'irc 'dir].each {<m>
    std.module_source m (lib_dir + "/" + m.s + ".puuro");
};

std.bg { execute \f script_file; };
