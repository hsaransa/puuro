require 'web 'file;

next_client_id = 7;
foofo = 1;

chat_views = [];
chat_last = ["yks kaks" "kol"];

say_to_all = {<x>
    (chat_last.size >= 10).then { chat_last.pop_first; };
    chat_last.append x;
    chat_views.each {<v> v 'push "new;" + x.size.to_string + ";" + x};
};

make_view = {<id>
    pushed = [];
    waiting = \n;

    f = {<msg *args>
        switch msg
            'pull {
                pushed.empty.then {
                    new_continuation {<cont> waiting = cont; };
                };
                pushed.pop_first
            }
            'push {
                pushed.append args.first;
                (waiting != \n).then { bg { w = waiting; waiting = \n; w.continue \n } };
            }
            'id {id};
    };
    f
};

all_clients = [];

make_client = {
    views = [];
    id = next_client_id;

    next_client_id = next_client_id + 1;

    f = {<msg *args>
        switch msg
            'view {
                views.at args.first - 1
            }
            'new_view {
                views.append (make_view views.size + 1);
                views.last
            }
            'id {
                id
            };
    };
    all_clients.append f;
    f
};

web_server 8080
{<in out>
    # Get request

    method = in();
    path = in();
    query = "";
    ((path.find "?") >= 0).then { path, query = path.split "?" };
    headers = in();
    data = (method == 'POST).then {in()};

    print "DATA '" data "'";

    # Parse client from cookie

    c = headers.filter {<x> x.first == "Cookie" };

    client = c.empty.if
        {make_client()}
        {id = (c.first.second.split "id=").second.to_integer;
         c = all_clients.filter {<x> (x 'id) == id};
         c.empty.if
            {make_client()}
            {c.first}};

    block
    {
        (path == "/")
        {
            view = client 'new_view;
            chat_views.append view;

            chat_last.each {<x>
                view 'push "new;" + x.size.to_string + ";" + x
            };

            out "HTTP/1.0 200 OK\r\n";
            out "Content-type: text/html\r\n";
            out "Set-Cookie: id=" + id.to_string + "\r\n";
            out "\r\n";

            s = read_file "examples/puuroweb.html";
            a, b = s.split "$VIEW$" 1;
            s = a + (view 'id).to_string + b;

            ss = read_file "examples/puuroweb.js";
            a, b = s.split "$SCRIPT$" 1;
            s = a + ss + b;

            out s;
            out \n;
            break;
        };

        (path == "/push")
        {
            view = client 'view (query.to_integer);

            out "HTTP/1.0 200 OK\r\n";
            out "Content-type: text/plain\r\n";
            out "\r\n";
            out (view 'pull);
            out \n;
            break;
        };

        (path == "/act")
        {
            while {data.empty.not}
            {
                print "TO BE PARSED " data;
                cmd, data = data.split ";" 1;
                (cmd == "msg")
                {
                    msg, data = data.split ";end;" 1;
                    say_to_all msg;
                };
            };

            out "HTTP/1.0 200 OK\r\n";
            out "\r\n";
            out \n;

            break;
        };

        (path == "/puuroweb.js")
        {
            out "HTTP/1.0 200 OK\r\n";
            out "Content-type: text/html\r\n";
            out "\r\n";
            out (read_file "examples/puuroweb.js");
            out \n;
            break;
        };

        out "HTTP/1.0 404 File not found\r\n";
        out "Content-type: text/plain\r\n";
        out "\r\n";
        out "File " + path + " not found.\r\n";
        out \n;
    };
};
